
import Mathlib.Data.Vector
import Mathlib.Data.Finset.Basic
import Mathlib.Tactic.Linarith
-- import Mathlib.Data.Fintype.BigOperators
import Mathlib.Algebra.BigOperators.Basic
import BooleanAnalysis.BooleanVector
import LLMstep
import Mathlib.Data.Fintype.Vector
import Mathlib.Data.Setoid.Partition
-- import Mathlib.Probability.Notation

open Vector BigOperators Finset
open Classical

-- def

#check (n: Nat) ‚Üí { i : Nat // i < n  }


class OfInt (Œ± : Type u) (_ : Int) where
  /-- The `OfNat.ofNat` function is automatically inserted by the parser when
  the user writes a numeric literal like `1 : Œ±`. Implementations of this
  typeclass can therefore customize the behavior of `n : Œ±` based on `n` and
  `Œ±`. -/
  ofInt : Œ±


instance : OfNat Bool n where
  ofNat := match n with
    | 1 => true
    | _ => false

def Bool.toInt (b : Bool) : Int := if b then -1 else 1
def Bool.toRat (b : Bool) : Rat := if b then -1 else 1

#eval (0 : Bool)
#eval (1 : Bool)


-- class BooleanF (Œ± : Type u) where
--   xor : Œ± ‚Üí Œ± ‚Üí Œ±
--   and : Œ± ‚Üí Œ± ‚Üí Œ±
--   or  : Œ± ‚Üí Œ± ‚Üí Œ±
--   not : Œ± ‚Üí Œ±
--   bfalse : Œ±
--   btrue : Œ±

#eval Max.max (-1) (2)


instance : IsCommutative Bool Bool.xor := ‚ü®
  by
    intro a b
    cases a <;> cases b <;> (simp [Bool.xor];)
‚ü©

instance : IsAssociative Bool Bool.xor := ‚ü®
  by
    intro a b c
    cases a <;> cases b <;> cases c <;> (simp [Bool.xor];)
  ‚ü©

#check Fin.fintype 10

-- -- TODO: better definition??
-- TODO: big oplus for XOR syntax
def vector_innerprod_bool {n : Nat} (x y : BoolVec n) : Bool :=
  fold (Bool.xor : Bool ‚Üí Bool ‚Üí Bool) true (fun j => ((x.get j) ‚àß  (y.get j))) (Fin.fintype n).elems

def vector_innerprod {n : Nat} (x y : BoolVec n) : Rat :=
  ‚Üë (vector_innerprod_bool x y).toRat
-- def vector_innerprod {n : Nat} (x y : BoolVec n) : Rat :=
--   ‚àè j : Fin n,  Bool.toRat ((x.get j) ‚àß  (y.get j))
  -- Vector.map‚ÇÇ (and . .) x y
  -- |>.toList
  -- |>.foldl xor false

infixr:75 " ‚¨ù " => (vector_innerprod . .)


def BooleanFunc {n : Nat}  := (Vector Bool n) ‚Üí Rat

def BooleanFinset := Finset.image Bool.toRat Finset.univ
#check BooleanFinset

-- -- -- Wait is the below actually right?
-- -- -- TODO: cast the bellow?
-- -- -- TODO: how do we do this ¬± 1 thing
def œá {n : Nat} (S : BoolVec n) : BooleanFunc (n := n) := fun (x : BoolVec n) =>
  x ‚¨ù S
-- def œá {n : Nat} [Boolean Œ±] (S : BoolVec n) : BooleanFunc := fun (x : ) => x ‚¨ù S


def expecation {n : Nat} (f : BooleanFunc (n := n)) : Rat :=
  (‚àë i : Vector Bool n, f i) / 2^n

notation "ùîº[" f "]" => expecation f

def function_innerprod {n : Nat} (f g : BooleanFunc (n := n)) : Rat  :=
  let inner : BooleanFunc (n := n) := fun (x : BoolVec n) => f x * g x
  ùîº[inner]

def function_innerprod_unnorm {n : Nat} (f g : BooleanFunc (n := n)) : Rat  :=
  -- let inner : BooleanFunc (n := n) := fun (x : BoolVec n) => f x * g x
  ‚àë i : Vector Bool n, f i * g i

lemma function_innerprod_unnorm_eq (f g : BooleanFunc (n := n)) :
  (‚àë i : Vector Bool n, f i * g i) = function_innerprod_unnorm f g := by rfl

theorem function_innerprod_unnorm_def {n : Nat} (f g : BooleanFunc (n := n)) :
  function_innerprod_unnorm f g / 2^n = function_innerprod f g := by
    simp [function_innerprod, expecation, function_innerprod_unnorm]

def Fourier_coefficient {n : Nat} (f : BooleanFunc (n := n)) (S : BoolVec n) :=
  function_innerprod f (œá S)

-- TODO: maybe we can't **really** use Rat... we have to use boolean/ true false maybe and then write this inhab for it
def Fourier_function {n : Nat} (f : BooleanFunc (n := n)) : BooleanFunc (n := n) :=
  fun (S : BoolVec n) => Fourier_coefficient f S

def symm_diff {n : Nat} (S‚ÇÅ S‚ÇÇ : BoolVec n) : BoolVec n:=
  ofFn (fun i => if S‚ÇÅ.get i = S‚ÇÇ.get i then false else true)
  -- Vector.map‚ÇÇ (fun x => fun y => if x = y then false else true) S‚ÇÅ S‚ÇÇ
  -- _function_sum _symm_diff ‚ü®2^n - 1, by sorry‚ü© -- TODO: rm sorry

#check expecation
  -- (‚àë x : Vector Bool n, f x) / 2^n

-- def dot_setoid {n : Nat} (a : Vector Bool (n := n)) : Setoid (Vector Bool n) := --Setoid.ker (fun x => vector_innerprod_bool x a)
--     ‚ü®fun x => fun y => x ‚¨ù a = y ‚¨ù a,
--       ‚ü®
--         by intro x; simp,
--         by intro x y; simp; intro h; rw [h],
--         by intro x y z; simp; intros h1 h2; rw [h1, h2]
--       ‚ü©
--     ‚ü©

-- #check Setoid.classes (dot_setoid (n := 10) (ofFn (fun _ => true)))

-- noncomputable instance {n : Nat} (a : Vector Bool (n := n)) : DecidableRel (dot_setoid (n := n) a).r :=
--   fun x y => by
--     simp [dot_setoid]
--     apply Classical.propDecidable

-- #check @Quotient.mk'' (Vector Bool 10) (dot_setoid default) --: Vector Bool n ‚Üí Quotient (dot_setoid a)

-- TODO: idk how to do this but want proof that returned item is true at spot
-- def first_non_false (a : Vector Bool n) (h : a ‚â† default) : ‚ü®Fin n, Vector.get a‚ü© := sorry

lemma expec_prod_nonzero_of_0 {n' : Nat} (a : Vector Bool (n := Nat.succ n')) (ha_neq : a ‚â† default) : ùîº[œá a] = 0 := by
  let n := Nat.succ n'
  simp [expecation]
  let one_set := Finset.filter (fun x => (œá a) x  = 1) (Finset.univ : Finset (Vector Bool n))
  let neg_one_set := Finset.filter (fun x => (œá a) x = -1) (Finset.univ : Finset (Vector Bool n))

  have : ‚àë x : Vector Bool n, (œá a) x  = ‚àë x in one_set, (œá a) x + ‚àë y in neg_one_set, (œá a) y := by
    have unioned : (Finset.univ : Finset (Vector Bool n)) = one_set ‚à™ neg_one_set := by
      ext x
      apply Iff.intro
      . intro h
        simp [one_set, neg_one_set, œá, vector_innerprod, Bool.toRat]
        cases vector_innerprod_bool x a with
        | false => simp
        | true => simp
      . simp
    have disjoint : Disjoint one_set neg_one_set := by
      have : ‚àÄ ‚¶Éa‚¶Ñ, a ‚àà one_set ‚Üí a ‚àâ neg_one_set := by
        intro a h
        simp [one_set, œá] at h
        simp [neg_one_set, œá]
        rw [h]
        simp
      rwa [Finset.disjoint_left]
    rw [unioned]
    rw [Finset.sum_union disjoint]

  rw [this]
  have eq_1 : ‚àÄ x ‚àà one_set, (œá a) x = 1 := by
    intro x h
    simp [one_set] at h
    simp [h]
  have eq_neg_1 : ‚àÄ x ‚àà neg_one_set, (œá a) x = -1 := by
    intro x h
    simp [neg_one_set] at h
    simp [h]

  rw [Finset.sum_eq_card_nsmul eq_1, Finset.sum_eq_card_nsmul eq_neg_1]
  -- TODO: **this whole thing should actually be its own lemma**
  have : card one_set = card neg_one_set := by
    simp [one_set, neg_one_set, œá, vector_innerprod]
    let f : (a : Vector Bool n) ‚Üí a ‚àà one_set ‚Üí (Vector Bool n) := fun a =>
      fun ha =>
        Vector.cons (Bool.not (Vector.head a)) (Vector.tail a)
    have h‚ÇÅ :  ‚àÄ a (ha : a ‚àà one_set), f a ha ‚àà neg_one_set := by
      intro x ha
      simp [one_set, œá, vector_innerprod, vector_innerprod_bool] at ha
      simp [neg_one_set, œá, vector_innerprod, vector_innerprod_bool]
      rw [‚Üê ha]
      sorry


    have h‚ÇÇ : ‚àÄ a b (ha : a ‚àà one_set) (hb : b ‚àà one_set) (h : f a ha = f b hb), a = b := sorry
    have h‚ÇÉ : ‚àÄ b ‚àà neg_one_set, ‚àÉ a, ‚àÉ (ha : a ‚àà one_set), f a ha = b := sorry

    exact Finset.card_congr f h‚ÇÅ h‚ÇÇ h‚ÇÉ

  rw [this]
  simp





-- TODO: what here
lemma expec_prod_nonzero_of_0' {n : Nat} (f : BooleanFunc (n := n)) :
  (‚àÉ a,  a ‚â† Inhabited.default ‚àß ‚àÄ x, f x = x ‚¨ù a) ‚Üí (ùîº[f] = 0)  := by
  intro ‚ü®a, h1, h2‚ü©
  simp [expecation]; left
  have : ‚àÄ x ‚àà Finset.univ, f x = x ‚¨ù a := by
    intro x h
    apply h2
  rw [Finset.sum_congr rfl this]

  simp [Inhabited.default, *] at h1
  simp [vector_innerprod, Bool.toRat]

  let t‚ÇÅ := fun x => (‚àè x‚ÇÅ : Fin n, if Vector.get x x‚ÇÅ = true ‚àß Vector.get a x‚ÇÅ = true then (-1 : Rat) else (1 : Rat))
  let t‚ÇÇ := fun x => (‚àè x‚ÇÅ : { i : Fin n // Vector.get a i = true },
    let ‚ü®x‚ÇÅ, _‚ü© := x‚ÇÅ
    if Vector.get x x‚ÇÅ = true then -1 else (1 : Rat))
  have : ‚àÄ x ‚àà Finset.univ, (t‚ÇÅ x)
    = t‚ÇÇ x := by sorry
  rw [Finset.sum_congr rfl this]
  /-
  The remainder of this proof is straightoforward.
  We must do induction. Base case n = 1, then straightforward
  IH assume before, split with n + 1, if n + 1 ‚àâ a, then we are done. Otherwise we
  split up the sum and show one is * -1 the other is * 1
  -/
  sorry


lemma expec_prod_zero_of_1 {n : Nat} (f : BooleanFunc (n := n)) :
  (‚àÉ a, (‚àÄ x, f x = x ‚¨ù a) ‚àß a= Inhabited.default) ‚Üí (ùîº[f] = 1)  := by
  intro ‚ü®a, h‚ÇÅ, h‚ÇÇ‚ü©
  simp [expecation]
  have : ‚àÄ x ‚àà Finset.univ, f x = x ‚¨ù a := by
    intro x h
    apply h‚ÇÅ
  rw [Finset.sum_congr _ this]
  simp [vector_innerprod]
  let t‚ÇÅ := fun x => (‚àè x‚ÇÅ : Fin n, if Vector.get x x‚ÇÅ = true ‚àß Vector.get a x‚ÇÅ = true then (-1 : Rat) else (1 : Rat))
  let t‚ÇÇ := fun x => (‚àè x‚ÇÅ : { i : Fin n // Vector.get a i = true },
    let ‚ü®x‚ÇÅ, _‚ü© := x‚ÇÅ
    if Vector.get x x‚ÇÅ = true then -1 else (1 : Rat))
  have : ‚àÄ x : Vector Bool n, (t‚ÇÅ x)
    = t‚ÇÇ x := by sorry
  -- rw [Fintype.sum_congr (t‚ÇÅ) (t‚ÇÇ) this]
  sorry





-- lemma function_sum_expectation {n : Nat} (f : BooleanFuncR (n := n)) :
--   _function_sum f ‚ü®2^n - 1, by sorry‚ü© = ùîº[x]   := sorry

theorem orthonormal_parity_func_ne {n : Nat} (S‚ÇÅ S‚ÇÇ : BoolVec n) :
    S‚ÇÅ ‚â† S‚ÇÇ ‚Üí
     function_innerprod_unnorm (œá (n := n) S‚ÇÅ) (œá (n := n) S‚ÇÇ) = 0 :=
  -- let œá‚ÇÅ := œá (n := n) (Œ± := Rat) S‚ÇÅ
  -- let œá‚ÇÇ := œá (n := n) (Œ± := Rat) S‚ÇÇ
  by
    intro h
    have prod : (x : BoolVec n) ‚Üí œá S‚ÇÅ (x) * œá S‚ÇÇ (x) = œá (symm_diff S‚ÇÅ S‚ÇÇ) x := sorry
    -- rw [prod]
    -- rw [œá‚ÇÅ, œá‚ÇÇ]
    have  :  function_innerprod_unnorm (œá S‚ÇÅ) (œá S‚ÇÇ) / 2^n = 0 / 2^n ‚Üí function_innerprod_unnorm (œá S‚ÇÅ) (œá S‚ÇÇ) = 0 := by
      intro h1
      sorry -- TODO::::!!
      -- rw [Nat.zero_div]
    apply this
    rw [zero_div]
    apply expec_prod_nonzero_of_0
    use symm_diff S‚ÇÅ S‚ÇÇ
    have : symm_diff S‚ÇÅ S‚ÇÇ ‚â† default := by
      intro h1
      simp [symm_diff] at h1
      simp [h1] at h
      apply h
      -- have : default = ofFn (fun x => false) := by
      --   simp [default]
      simp [default] at h1
      have : ofFn (fun x => S‚ÇÅ.get x) = ofFn (fun x => S‚ÇÇ.get x) ‚Üí S‚ÇÅ = S‚ÇÇ := by
        intro h2
        sorry
      apply this
      sorry -- AHAHHHH
    apply And.intro
    . apply this
    . intro x
      simp [œá, symm_diff]
      sorry --- AHAHA TODO:

theorem fourier_equivalence {n : Nat} (f : BooleanFunc (n := n))  :
  f = fun x => ‚àë S : (Vector Bool n), ((Fourier_function f) S) * (œá S x) := by
    sorry

lemma switch_coe {n : Nat} (f g : BooleanFunc (n := n)) (S‚ÇÅ S‚ÇÇ : Vector Bool n): ‚àë x : Vector Bool n,
            Fourier_function f S‚ÇÅ * Fourier_function g S‚ÇÇ * œá S‚ÇÅ x * œá S‚ÇÇ x = Fourier_coefficient f S‚ÇÅ * Fourier_coefficient g S‚ÇÇ * (
              (‚àë x : Vector Bool n, œá S‚ÇÅ x * œá S‚ÇÇ x))
            := by sorry

theorem Plancherel_Theorem {n : Nat} (f g: BooleanFunc (n := n)) : function_innerprod f g = function_innerprod (Fourier_function f) (Fourier_function g)
  := by
    simp [function_innerprod, expecation]
    simp [Fourier_function]
    -- rw (fourier_equivalence f)
    -- rw [fourier_equivalence f, fourier_equivalence g]
    conv =>
      lhs
      rw [fourier_equivalence f, fourier_equivalence g]
      simp


    let t‚ÇÅ := fun x => (‚àë S : Vector Bool n, Fourier_function f S * œá S x) * (‚àë S : Vector Bool n, Fourier_function g S * œá S x)
    let t‚ÇÇ := fun x => ‚àë S‚ÇÅ : Vector Bool n, (‚àë S‚ÇÇ : Vector Bool n, Fourier_function f S‚ÇÅ * Fourier_function g S‚ÇÇ * œá S‚ÇÅ x * œá S‚ÇÇ x)
    have : ‚àÄ x ‚àà Finset.univ, t‚ÇÅ x =
        t‚ÇÇ x := by
          sorry
    rw [Finset.sum_congr rfl this]
    -- simp [t‚ÇÇ x]
    have : (‚àë a : Vector Bool n, t‚ÇÇ a) = ‚àë x : Vector Bool n, ((‚àë S : Vector Bool n, Fourier_function f S * Fourier_function g S * œá S x * œá S x) +
      (‚àë S‚ÇÅ : Vector Bool n, ‚àë S‚ÇÇ : {S‚ÇÇ : Vector Bool n // S‚ÇÅ ‚â† S‚ÇÇ},
        let ‚ü®S‚ÇÇ, hS‚ÇÇ‚ü© := S‚ÇÇ
        Fourier_function f S‚ÇÅ * Fourier_function g S‚ÇÇ * œá S‚ÇÅ x * œá S‚ÇÇ x)) := by
      sorry
    rw [this]
    conv =>
      lhs; lhs;
      rw [Finset.sum_add_distrib]
      rhs;
      rw [Finset.sum_comm]
      rhs;
      intro S‚ÇÅ;
      rw [Finset.sum_comm];
      rhs; intro S‚ÇÇ;
      rw [switch_coe f g S‚ÇÅ S‚ÇÇ]



      -- rhs;
    -- rw [function_innerprod_unnorm_def (œá S‚ÇÅ) (œá (‚ÜëS‚ÇÇ))]

    rw [orthonormal_parity_func_ne _ _ S‚ÇÇ.property]

      -- We want to move the coefficients to the front
      -- Fourier_function g S‚ÇÇ
    -- have :



      -- rw [orthonormal_parity_func_ne hS‚ÇÇ]

    -- conv =>
    --   lhs


      -- rw [t‚ÇÇ ]




      -- rw [‚Üê Fintype.prod_sum ]

#check Fintype.prod_bijective



    -- show _ = (‚àë x : Vector Bool n,
    --   (‚àë x_1 : Vector Bool n, f x_1 * œá x x_1) / 2 ^ n * ((‚àë x_1 : Vector Bool n, g x_1 * œá x x_1) / 2 ^ n)) / 2 ^ n

    sorry
-- TODO: actually do?

-- -- theorem Parseval_Theorem {n : Nat} (f : BooleanFunc n) : function_inner_prod f f = function_inner_prod (fourier_function f) (fourier_function f)
-- --   := sorry
